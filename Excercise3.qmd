---
title: "Untitled"
format: html
---

```{r}
library(readr)
library(sf)
library(dplyr)
library(ggplot2)
```
#StepA
```{r}
wildschwein_BE <- read_delim("Data/wildschwein_BE_2056.csv", ",")#Load data

wildschwein_BE$TierName |> unique()

sabi <- wildschwein_BE |>
  filter(TierName == "Sabi")|>
  filter (DatetimeUTC >= as.POSIXct("2015-07-01", tz = "UTC"), DatetimeUTC <as.POSIXct("2015-07-03", tz = "UTC"))
sabi

ggplot (sabi, aes (E, N, color = DatetimeUTC))+
  geom_point()+
  geom_path()+
  coord_equal()


sabi |>
  head(50)|>
  ggplot(aes(DatetimeUTC, 1))+
  geom_point()

sabi <- sabi |>
    mutate(
      n_plus1 = sqrt ((lead(E, 1) - E)^2 + (lead(N, 1)-N)^2), #steplenght 1
      n_plus2 = sqrt ((lead(E, 2) - E)^2 + (lead(N, 2)-N)^2),#steplenght2 forward
      nMinus1 = sqrt((lag(E, 1) - E)^2 + (lag(N, 1) - N)^2),# distance to pos -15 minutes
      nMinus2 = sqrt((lag(E, 2) - E)^2 + (lag(N, 2) - N)^2)# distance to pos -30 minutes
)

sabi <- sabi |>
    rowwise() |>
    mutate(
        stepMean = mean(c(nMinus2, nMinus1, n_plus1, n_plus2))
    ) |>
    ungroup()# to undo the grouping by row
   

ggplot(sabi, aes(stepMean))+
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = mean(sabi$stepMean), na.rm = TRUE)
  
sabi |> 
  mutate(static = stepMean < mean(stepMean, na.rm = TRUE))|>
  ggplot(aes(E, N))+
  geom_path()+
    geom_point(aes(color = static))+
                 coord_fixed()
    
```
#with posmo data


```{r}
library("readr")
library("sf")

posmo_K <- read_delim("Data/posmo_data.csv")
head(posmo_K)
posmo_K <- select(posmo_K, datetime, lon_x, lat_y)#To select only this three columns in the dataframe


posmo_K <- st_as_sf(posmo_K,
    coords = c("lon_x", "lat_y"),
    crs = 4326)#transforms the data frame into a sf object
posmo_K
posmo_K <- st_transform(posmo_K, 2056)#convert the coordinate system to CH1903+ LV95: EPSG:2056

#To be able to compute euclidean distances by hand, we need the coordinates stored in separate columns. The function st_coordinates extracts the coordinates from our sf object. 
posmoK_coordinates <- st_coordinates(posmo_K)

#We can bind these coordinates back to our sf object using cbind
posmo <- cbind(posmo_K, posmoK_coordinates)

#Explore your data and choose a single day for the next steps.
unique(posmo$datetime)

posmo_filter <- posmo |>
    filter(as.Date(datetime) == "2023-03-21")
 
```
#Task1. Segmentation

```{r}
#StepB
posmo_filter <- posmo_filter |>
    mutate(
      n_plus1 = sqrt ((lead(X, 1) - X)^2 + (lead(Y, 1)-Y)^2), #steplenght 1
      n_plus2 = sqrt ((lead(X, 2) - X)^2 + (lead(Y, 2)-Y)^2),#steplenght2 forward
      nMinus1 = sqrt((lag(X, 1) - X)^2 + (lag(Y, 1) - Y)^2),# steplenght 1 backward
      nMinus2 = sqrt((lag(X, 2) - X)^2 + (lag(Y, 2) - Y)^2)# steplenght 2 backward
)

 posmo_filter <- posmo_filter  |>
    rowwise() |>
    mutate(
        stepMean = mean(c(nMinus2, nMinus1, n_plus1, n_plus2))#new column with the average step-lenght among the 4 measures
    ) |>
    ungroup()# to undo the grouping by row
posmo_filter

#Task 3 and 4. Remove static points by applying threshold and visualize the segmented trajectories
posmo_filter <- posmo_filter |> 
  mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

#create a new column static with specifying a threshold, in this exercise, we use the mean of all stepMean values.
ggplot(posmo_filter, aes(X, Y))+
  geom_path()+
    geom_point(aes(color = static))+
                 coord_fixed()

```

#Task 4: Segment-based analysis. we need a unique ID for each segment that we can use as a grouping variable.
```{r}
#function to create a unique ID for each segment
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}

posmo_filter <- posmo_filter |>
    mutate(segment_id = rle_id(static))#to apply the previous function with the posmo_filter data set and add a new column called segment_id to assign unique IDs to sub-trajectories 

head(posmo_filter)

```
Visualize the moving segments by coloring them by segment_ID. Then use segment_ID as a grouping variable to determine the segments duration and remove short segments (e.g. segments with a duration < 5 Minutes)
```{r}
ggplot(posmo_filter, aes(X, Y))+
  geom_path(aes(color = segment_id))+
   coord_fixed()#only the trajectories

p<- ggplot(posmo_filter, aes(X, Y))+
  geom_path()+
  geom_point(aes(color = segment_id))+
  coord_fixed()
     #ggtitle("Moving segments colored by segment ID") +
                 #with points 
    
p <- p + labs(title = "Moving segments colored by segment ID") 
p
```
 
 
```{r}
posmo_onlymoves <- posmo_filter |>   
  filter(static == FALSE)#filters out stops and leaves only moves

posmo_onlymoves <- mutate(posmo_onlymoves, timelag = as.numeric(difftime(lead(datetime), datetime)))#add a new column with the time lag per sub trajectory
 colnames()

segments <- posmo_onlymoves|>
  group_by(segment_id) |> 
  filter(timelag > 5)

 
 ggplot(segments, aes(X, Y))+
  geom_path(aes(color = segment_id))+
   coord_fixed()
 
 q <- ggplot(segments, aes(X, Y))+
  geom_path()+
    geom_point(aes(color = segment_id))+
                 coord_fixed()#with points
 
 q <- p + labs(title = "Long segments (removed segments <5min")
 q
```
```{r}
library(cowplot)
plot_grid(p, q, labels = NULL, nrow = 2)
```
 
#Task5

```{r}
pedestrian <- read_delim("Data/pedestrian.csv", ",")#Load data

str(pedestrian)
pedestrian$TrajID <- as.factor(pedestrian$TrajID)

ggplot(pedestrian, aes(E, N))+
  geom_point(aes(color = TrajID))+
  facet_wrap(~ TrajID, nrow = 2)+
  geom_path(aes(color = TrajID))+
  theme_minimal()+
 theme(axis.text.x = element_text(angle = 90), legend.position = NULL)

```



